.pull-cache:
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

image: gradle:6.8.2-jdk15-hotspot

stages:
  - build
  - test
  - deploy

variables:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g"'

.gradle-init: &gradle-init
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - mkdir -p $GRADLE_USER_HOME
  - echo $M2_SIGNING_KEY | base64 -d > ./m2_signing_key.pgp
  - export GRADLE_PROPS_FILE=$GRADLE_USER_HOME/gradle.properties
  - touch $GRADLE_PROPS_FILE
  - echo "gradle.publish.key=${GRADLE_PUBLISH_KEY}" >> $GRADLE_PROPS_FILE
  - echo "gradle.publish.secret=${GRADLE_PUBLISH_SECRET}" >> $GRADLE_PROPS_FILE
  - echo "signing.keyId=${SIGNING_KEY_ID}" >> $GRADLE_PROPS_FILE
  - echo "signing.password=${SIGNING_PASSWORD}" >> $GRADLE_PROPS_FILE
  - echo "signing.secretKeyRingFile=./m2_signing_key.pgp" >> $GRADLE_PROPS_FILE
  - echo "sonatypeUsername=${SONATYPE_USERNAME}" >> $GRADLE_PROPS_FILE
  - echo "sonatypePassword=${SONATYPE_PASSWORD}" >> $GRADLE_PROPS_FILE

.gradle-cleanup: &gradle-cleanup
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export GRADLE_PROPS_FILE=$GRADLE_USER_HOME/gradle.properties
  - ls $GRADLE_USER_HOME
  - if test -f "$GRADLE_PROPS"; then
  -   rm -rf $GRADLE_PROPS
  -   echo "gradle.properties file cleaned up"
  - else
  -   echo "no gradle.properties file found"
  - fi
  - ls
  - if test -f "./m2_signing_key.pgp"; then
  -   rm -rf ./m2_signing_key.pgp
  -   echo "PGP signing key file cleaned up"
  - else
  -   echo "No PGP signing key file found"
  - fi

.build:
  stage: build
  script:
    - *gradle-init
    - gradle assemble
  after_script:
    - *gradle-cleanup
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

tasks:
  stage: build
  script:
    - *gradle-init
    - gradle tasks
  after_script:
    - *gradle-cleanup

.test:
  stage: test
  extends:
    - .pull-cache
  script:
    - *gradle-init
    - gradle check
    - bash <(curl -s https://codecov.io/bash)
  after_script:
    - *gradle-cleanup
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
  needs:
    - build

.deploy:
  stage: deploy
  extends:
    - .pull-cache
  script:
    - *gradle-init
    - gradle deploy
  after_script:
    - *gradle-cleanup
  needs:
    - test
